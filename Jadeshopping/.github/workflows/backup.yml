name: 自动备份

on:
  schedule:
    # 每天凌晨 2:00 UTC (北京时间 10:00) 执行备份
    - cron: '0 2 * * *'
  workflow_dispatch: # 允许手动触发
  push:
    branches: [ master, main ]  # 支持 master 和 main 分支
    tags: [ 'v*' ]

env:
  BACKUP_BRANCH: backup-$(date +%Y-%m-%d)
  BACKUP_TAG: backup-$(date +%Y%m%d-%H%M%S)

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 获取完整历史记录
        
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 运行测试
      run: npm run test --if-present
      continue-on-error: true
      
    - name: 构建项目
      run: npm run build
      continue-on-error: true
      
    - name: 创建备份信息文件
      run: |
        mkdir -p backup-info
        echo "# 备份信息" > backup-info/backup-info.md
        echo "- 备份时间: $(date)" >> backup-info/backup-info.md
        echo "- 提交哈希: ${{ github.sha }}" >> backup-info/backup-info.md
        echo "- 分支: ${{ github.ref_name }}" >> backup-info/backup-info.md
        echo "- 触发事件: ${{ github.event_name }}" >> backup-info/backup-info.md
        echo "- 工作流运行ID: ${{ github.run_id }}" >> backup-info/backup-info.md
        
        # 记录项目结构
        echo -e "\n## 项目结构" >> backup-info/backup-info.md
        tree -a -I 'node_modules|.git' >> backup-info/backup-info.md || ls -la >> backup-info/backup-info.md
        
        # 记录依赖信息
        echo -e "\n## 依赖信息" >> backup-info/backup-info.md
        echo "### package.json 依赖" >> backup-info/backup-info.md
        cat package.json | jq '.dependencies, .devDependencies' >> backup-info/backup-info.md || echo "无法解析 package.json" >> backup-info/backup-info.md
        
        # 记录构建信息
        if [ -d "dist" ]; then
          echo -e "\n## 构建产物" >> backup-info/backup-info.md
          ls -la dist/ >> backup-info/backup-info.md
        fi
        
    - name: 压缩源代码
      run: |
        tar -czf backup-source-$(date +%Y%m%d-%H%M%S).tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=dist \
          --exclude=build \
          .
          
    - name: 压缩构建产物
      run: |
        if [ -d "dist" ]; then
          tar -czf backup-build-$(date +%Y%m%d-%H%M%S).tar.gz dist/
        fi
        
    - name: 压缩依赖文件
      run: |
        tar -czf backup-deps-$(date +%Y%m%d-%H%M%S).tar.gz \
          package.json \
          package-lock.json \
          tsconfig.json \
          vite.config.ts \
          tailwind.config.js \
          postcss.config.js \
          eslint.config.js \
          vercel.json \
          .vercelignore \
          .gitignore
          
    - name: 创建备份分支
      run: |
        BACKUP_BRANCH="backup-$(date +%Y-%m-%d)"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 创建新的备份分支
        git checkout -b $BACKUP_BRANCH
        
        # 添加备份文件
        git add backup-info/
        git add *.tar.gz
        
        # 提交备份
        git commit -m "自动备份 - $(date)" || echo "没有新的更改需要提交"
        
        # 推送备份分支
        git push origin $BACKUP_BRANCH --force
        
    - name: 创建 Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: backup-${{ github.ref_name }}-$(date +%Y%m%d)
        release_name: 备份 Release ${{ github.ref_name }}
        body: |
          ## 自动备份 Release
          
          - 源标签: ${{ github.ref_name }}
          - 备份时间: $(date)
          - 提交哈希: ${{ github.sha }}
          
          ### 包含内容
          - 完整源代码
          - 构建产物
          - 依赖配置文件
          - 项目文档
          
        draft: false
        prerelease: false
        
    - name: 上传备份文件到 Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./backup-source-*.tar.gz
        asset_name: source-backup.tar.gz
        asset_content_type: application/gzip
        
    - name: 清理旧备份分支
      run: |
        # 保留最近 7 天的备份分支
        git fetch origin
        for branch in $(git branch -r | grep 'origin/backup-' | sed 's/origin\///'); do
          branch_date=$(echo $branch | sed 's/backup-//')
          if [[ $(date -d "$branch_date" +%s) -lt $(date -d "7 days ago" +%s) ]]; then
            git push origin --delete $branch || echo "无法删除分支 $branch"
          fi
        done
        
    - name: 发送通知
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 备份成功完成"
          echo "备份分支: backup-$(date +%Y-%m-%d)"
          echo "备份时间: $(date)"
        else
          echo "❌ 备份失败"
          echo "请检查工作流日志"
        fi