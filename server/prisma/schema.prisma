// 数据源与客户端生成
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 枚举定义
enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  CREATED
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
}

enum CouponType {
  PERCENT
  FIXED
}

enum PointType {
  EARN
  SPEND
  ADJUST
}

enum WalletType {
  DEPOSIT
  SPEND
  REFUND
  ADJUST
}

enum AnnouncementLevel {
  INFO
  WARNING
  CRITICAL
}

// 用户与权限
model User {
  id            String         @id @default(cuid())
  username      String         @unique
  email         String?        @unique
  phone         String?        @unique
  passwordHash  String
  name          String?
  avatarUrl     String?
  gender        String?
  birthDate     DateTime?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  roles         UserRole[]
  orders        Order[]
  addresses     Address[]
  points        PointLedger[]
  walletEntries WalletEntry[]
  coupons       UserCoupon[]
  consent       GDPRConsent?
}

model GDPRConsent {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique
  dataConsent      Boolean  @default(false)
  marketingConsent Boolean  @default(false)
  consentedAt      DateTime @default(now())
}

model Role {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String          @id @default(cuid())
  key         String          @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  role    Role   @relation(fields: [roleId], references: [id])
  roleId  String

  @@id([userId, roleId])
}

model RolePermission {
  role        Role       @relation(fields: [roleId], references: [id])
  roleId      String
  permission  Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([roleId, permissionId])
}

// 商品与分类
model Category {
  id        String      @id @default(cuid())
  name      String
  slug      String      @unique
  parent    Category?   @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId  String?
  children  Category[]  @relation("CategoryToCategory")
  products  ProductCategory[]
}

model Product {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?
  currency    String            @default("CNY")
  status      ProductStatus     @default(DRAFT)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // 评分与评论数量（用于后端化的评分筛选/排序）
  rating      Float             @default(0)
  reviewCount Int               @default(0)

  skus        Sku[]
  categories  ProductCategory[]
}

model Sku {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  skuCode    String   @unique
  attributes Json?
  price      Decimal  @db.Decimal(12, 2)
  stock      Int      @default(0)
  reserved   Int      @default(0)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orderItems OrderItem[]
}

model ProductCategory {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
}

// 订单与支付物流
model Order {
  id            String       @id @default(cuid())
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
  status        OrderStatus  @default(CREATED)
  total         Decimal      @db.Decimal(12, 2)
  currency      String       @default("CNY")
  paymentStatus PaymentStatus @default(PENDING)
  shipmentStatus ShipmentStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  items    OrderItem[]
  payments Payment[]
  shipments Shipment[]
  addressId String?
  address  Address? @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  sku       Sku     @relation(fields: [skuId], references: [id])
  skuId     String
  productName String
  skuCode   String
  price     Decimal @db.Decimal(12, 2)
  quantity  Int
}

model Payment {
  id            String        @id @default(cuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String
  method        String
  amount        Decimal       @db.Decimal(12, 2)
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  paidAt        DateTime?
}

model Shipment {
  id             String         @id @default(cuid())
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        String
  carrier        String
  trackingNumber String?        @unique
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  address        Address?       @relation(fields: [addressId], references: [id])
  addressId      String?
}

// 地址
model Address {
  id         String   @id @default(cuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  fullName   String
  phone      String
  country    String
  province   String?
  city       String?
  district   String?
  street     String
  postalCode String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders     Order[]
  shipments  Shipment[]
}

// 营销、积分、钱包
model Coupon {
  id        String     @id @default(cuid())
  code      String     @unique
  type      CouponType
  value     Decimal    @db.Decimal(12, 2)
  minSpend  Decimal?   @db.Decimal(12, 2)
  startAt   DateTime?
  endAt     DateTime?
  usageLimit Int?
  usedCount  Int       @default(0)
  isActive   Boolean   @default(true)

  users     UserCoupon[]
}

model UserCoupon {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  coupon  Coupon @relation(fields: [couponId], references: [id])
  couponId String
  redeemedAt DateTime?

  @@id([userId, couponId])
}

model PointLedger {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  points    Int
  type      PointType
  reason    String?
  createdAt DateTime  @default(now())
}

model WalletEntry {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  change    Decimal   @db.Decimal(12, 2)
  type      WalletType
  description String?
  createdAt DateTime   @default(now())
}

// 内容与首页元素
model ContentPage {
  id         String   @id @default(cuid())
  slug       String   @unique
  title      String
  contentMd  String?
  publishedAt DateTime?
  updatedAt   DateTime  @updatedAt
}

model CarouselItem {
  id        String  @id @default(cuid())
  imageUrl  String
  linkUrl   String?
  title     String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
}

model Announcement {
  id        String            @id @default(cuid())
  message   String
  level     AnnouncementLevel @default(INFO)
  isActive  Boolean           @default(true)
  startAt   DateTime?
  endAt     DateTime?
}